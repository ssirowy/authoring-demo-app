export default function fetchSectionData() { return [{"@{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation": "../../section-schema.xsd", "zypInfos": {"zypInfo": [{"name": {"$": "Scott Sirowy"}, "timestamp": {"$": "2017-06-01T09:00:00"}, "text": {"$": "Worked on schema for 5 minutes"}}, {"name": {"$": "Adrian Lizarraga"}, "timestamp": {"$": "2017-06-01T09:00:00"}, "text": {"$": "Worked on schema some more"}}, {"name": {"$": "Scott Sirowy"}, "timestamp": {"$": "2017-06-06T09:00:00"}, "text": {"$": "Worked on demo styling"}}, {"name": {"$": "Scott Sirowy"}, "timestamp": {"$": "2017-06-06T09:00:00"}, "text": {"$": "Got comments to work"}}]}, "title": {"$": "Programming"}, "contentResources": {"contentResource": [{"@{http://www.w3.org/2001/XMLSchema-instance}type": "TextResource", "@guid": 12345678, "#": [{"$": "\n     A recipe consists of instructions that a chef executes, like adding eggs or stirring ingredients. Likewise, "}, {"definition": {"#": [{"$": "a "}, {"term": {"$": "computer program"}}, {"$": " consists of instructions that a computer executes (or runs), like multiplying numbers or printing a number to a screen."}]}}, {"$": "\n"}]}, {"@{http://www.w3.org/2001/XMLSchema-instance}type": "ImageResource", "@guid": Infinity, "url": {"$": "https://zytools.zybooks.com/zyAuthor/ProgInCCppJava/50/IMAGES/embedded_image01spZA9RiRIvVsll3GwWFwLQKCCAATWbs3N9sVBcgs8dg_10_bTiqgzpCFQ.png"}, "caption": {"$": "A  program is like a recipe"}}, {"@{http://www.w3.org/2001/XMLSchema-instance}type": "TextResource", "@guid": 12345678, "#": [{"definition": {"#": [{"term": {"$": "Code"}}, {"$": " can be defined easily using new setup."}]}}, {"$": ".   See below for an accessible code block.  Note this code\n    was defined in its own file, which could even allow us to compile such code before ever processing to ensure the code can actually run.\n    \n    Newlines are respected in source, which helps to remove the need for tags like br\n    "}]}, {"@{http://www.w3.org/2001/XMLSchema-instance}type": "MultipleChoiceResource", "@guid": 22345679, "question": [{"text": {"$": "What is the approximate shape of the planet Earth?"}, "choice": [{"correct": {"$": false}, "label": {"$": "Flat"}, "explanation": {"$": "The world  is not flat...  Are u sure?"}}, {"correct": {"$": true}, "label": {"$": "Round"}, "explanation": {"$": "The world is round."}}]}, {"text": {"$": "What is 2 + 2?"}, "choice": [{"correct": {"$": true}, "label": {"$": 4}, "explanation": {"$": "Yeah it's 4."}}, {"correct": {"$": false}, "label": {"$": 5}, "explanation": {"$": "Nope. Try using your fingers to count."}}]}]}, {"@{http://www.w3.org/2001/XMLSchema-instance}type": "CommentResource", "@guid": 34567789, "name": {"$": "Scott Sirowy"}, "timestamp": {"$": "2017-05-30T09:00:00"}, "comment": {"$": "Sample comment"}}, {"@{http://www.w3.org/2001/XMLSchema-instance}type": "ImageResource", "@guid": 56712367, "url": {"$": "http://www.cs.ucr.edu/~vahid/vahid06.jpg"}, "caption": {"$": "Franklin Delano Vahid"}}]}}, {"@{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation": "../../section-schema.xsd", "zypInfos": {"zypInfo": [{"name": {"$": "Adrian Lizarraga"}, "timestamp": {"$": "2017-06-07T09:00:00"}, "text": {"$": "Created new section"}}, {"name": {"$": "Adrian Lizarraga"}, "timestamp": {"$": "2017-06-07T09:02:00"}, "text": {"$": "Added image"}}, {"name": {"$": "Scott Sirowy"}, "timestamp": {"$": "2017-06-08T09:02:00"}, "text": {"$": "Undid all of Adrians work. Copied zyBook section basics"}}]}, "title": {"$": "A first program"}, "contentResources": {"contentResource": [{"@{http://www.w3.org/2001/XMLSchema-instance}type": "TextResource", "@guid": 11345678, "$": "Below is a simple first C++ program."}, {"@{http://www.w3.org/2001/XMLSchema-instance}type": "CodeResource", "@guid": 12345678, "@language": "cpp", "@file": "main.cpp", "code": {"$": "#include <iostream>;\nusing namespace std;\n\nint main() {\n  cout << \"Scott was here\";\n}\n"}}, {"@{http://www.w3.org/2001/XMLSchema-instance}type": "CommentResource", "@guid": 13467789, "name": {"$": "Adrian Lizarraga"}, "timestamp": {"$": "2017-06-07T09:00:00"}, "comment": {"$": "TODO: Finish writing content later"}}, {"@{http://www.w3.org/2001/XMLSchema-instance}type": "TextResource", "@guid": 45789234, "#": [{"$": "\n        The program consists of several lines of code. "}, {"definition": {"#": [{"term": {"$": "Code"}}, {"$": " is the textual representation of a program"}]}}, {"$": ". "}, {"definition": {"#": [{"$": "A "}, {"term": {"$": "line"}}, {"$": " is a row of text."}]}}, {"$": "\n        \n        The program starts by "}, {"definition": {"#": [{"$": "executing a function called "}, {"term": {"$": "main"}}, {"$": ". "}]}}, {"$": "A function is a list of statements.\n        \n        "}, {"definition": {"#": [{"$": "{ and } are called braces, denoting a list of "}, {"term": {"$": "statements"}}]}}, {"$": ". main's statements appear between braces.\n        \n        Like a baker temporarily stores ingredients on a countertop, a program temporarily stores values in a memory. "}, {"definition": {"#": [{"$": "A "}, {"term": {"$": "memory"}}, {"$": " is composed of numerous individual locations, each able to store a value"}]}}, {"$": ". The statement int wage = 20 reserves a location in memory, names that location wage, and stores the value 20 in that location. A named location in memory, such as wage, is called a variable (because that value can vary).\n        \n        Many code editors color certain words, as in the above program, to assist a human reader understand various words' roles.\n        \n        "}, {"definition": {"#": [{"$": "A "}, {"term": {"$": "compiler"}}, {"$": " is a tool that converts a program into low-level machine instructions (0s and 1s) understood by a particular computer."}]}}, {"$": " Because a programmer interacts extensively with a compiler, this material frequently refers to the compiler.\n\n    "}]}, {"@{http://www.w3.org/2001/XMLSchema-instance}type": "MultipleChoiceResource", "@guid": 22345679, "question": [{"text": {"$": "Textual representation of a program"}, "choice": [{"correct": {"$": false}, "label": {"$": "main"}, "explanation": {}}, {"correct": {"$": false}, "label": {"$": "Statement"}, "explanation": {}}, {"correct": {"$": false}, "label": {"$": "Line"}, "explanation": {}}, {"correct": {"$": false}, "label": {"$": "braces"}, "explanation": {}}, {"correct": {"$": true}, "label": {"$": "Code"}, "explanation": {}}, {"correct": {"$": false}, "label": {"$": "Compiler"}, "explanation": {}}, {"correct": {"$": false}, "label": {"$": "Variable"}, "explanation": {}}]}, {"text": {"$": "Performs a specific action"}, "choice": [{"correct": {"$": false}, "label": {"$": "main"}, "explanation": {}}, {"correct": {"$": true}, "label": {"$": "Statement"}, "explanation": {}}, {"correct": {"$": false}, "label": {"$": "Line"}, "explanation": {}}, {"correct": {"$": false}, "label": {"$": "braces"}, "explanation": {}}, {"correct": {"$": false}, "label": {"$": "Code"}, "explanation": {}}, {"correct": {"$": false}, "label": {"$": "Compiler"}, "explanation": {}}, {"correct": {"$": false}, "label": {"$": "Variable"}, "explanation": {}}]}, {"text": {"$": "A row of text"}, "choice": [{"correct": {"$": false}, "label": {"$": "main"}, "explanation": {}}, {"correct": {"$": false}, "label": {"$": "Statement"}, "explanation": {}}, {"correct": {"$": true}, "label": {"$": "Line"}, "explanation": {}}, {"correct": {"$": false}, "label": {"$": "braces"}, "explanation": {}}, {"correct": {"$": false}, "label": {"$": "Code"}, "explanation": {}}, {"correct": {"$": false}, "label": {"$": "Compiler"}, "explanation": {}}, {"correct": {"$": false}, "label": {"$": "Variable"}, "explanation": {}}]}, {"text": {"$": "Delimits (surrounds) a list of statements."}, "choice": [{"correct": {"$": false}, "label": {"$": "main"}, "explanation": {}}, {"correct": {"$": false}, "label": {"$": "Statement"}, "explanation": {}}, {"correct": {"$": false}, "label": {"$": "Line"}, "explanation": {}}, {"correct": {"$": true}, "label": {"$": "braces"}, "explanation": {}}, {"correct": {"$": false}, "label": {"$": "Code"}, "explanation": {}}, {"correct": {"$": false}, "label": {"$": "Compiler"}, "explanation": {}}, {"correct": {"$": false}, "label": {"$": "Variable"}, "explanation": {}}]}]}]}}]; }